# -*- coding: utf-8 -*-
"""create_bucket

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TLEJrYdhYjtBD9xgYkefGLOzdiV70TH6
"""

pip install boto3

import boto3

aws_access_key = "**********"
aws_secret_key = "*******************"

# Create EC2 client
ec2 = boto3.client(
    'ec2',
    region_name='us-east-2',
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

import boto3

aws_access_key = "**************"
aws_secret_key = "*******************"
region = "us-east-2"

# EC2 client
ec2 = boto3.client(
    "ec2",
    region_name=region,
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

# S3 client (must include credentials too)
s3 = boto3.client(
    "s3",
    region_name=region,
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"  # must be globally unique

response = s3.create_bucket(
    Bucket=bucket_name,
    CreateBucketConfiguration={'LocationConstraint': region}
)

print(f"Bucket {bucket_name} created successfully!")

import boto3

 = "**************"
aws_secret_key = "****************************"
region = "us-east-2"

# EC2 client
ec2 = boto3.client(
    "ec2",
    region_name=region,
    _id=,
    aws_secret_access_key=aws_secret_key
)

# S3 client (only once — don’t overwrite it!)
s3 = boto3.client(
    "s3",
    region_name=region,
    _id=,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"  # must already exist
file_name = "myfile.txt"

# Create a local file
with open(file_name, "w") as f:
    f.write("Hello S3")

# Upload file
s3.upload_file(file_name, bucket_name, file_name)
print(f"File {file_name} uploaded successfully!")

import boto3

 = "**************"
aws_secret_key = "****************************"
region = "us-east-2"

s3 = boto3.client(
    "s3",
    region_name=region,
    _id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"  # make sure this matches your bucket
file_name = "myfile.txt"               # must already exist in S3
download_name = "downloaded-file.txt"

try:
    s3.download_file(bucket_name, file_name, download_name)
    print(f" File {file_name} downloaded successfully as {download_name}!")
except Exception as e:
    print(f" Error downloading file: {e}")

import boto3

aws_access_key = "**************"
aws_secret_key = "****************************"
region = "us-east-2"


s3 = boto3.client(
    "s3",
    region_name=region,
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"   # update to your real bucket
file_name = "myfile.txt"                # object to delete

try:
    s3.delete_object(Bucket=bucket_name, Key=file_name)
    print(f" File '{file_name}' deleted successfully from bucket '{bucket_name}'!")
except Exception as e:
    print(f" Error deleting file: {e}")

import boto3

# Hardcoded credentials (only for lab/testing)
aws_access_key = "**************"
aws_secret_key = "****************************"
region = "us-east-2"

# Create S3 client with creds
s3 = boto3.client(
    "s3",
    region_name=region,
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"   # change this to your actual bucket name

try:
    s3.put_bucket_versioning(
        Bucket=bucket_name,
        VersioningConfiguration={"Status": "Enabled"}
    )
    print(f"Versioning enabled for bucket {bucket_name}!")
except Exception as e:
    print(f"Error enabling versioning: {e}")

import boto3

# Hardcoded credentials (ok for lab/testing, not safe for production)
aws_access_key = "**************K"
aws_secret_key = "****************************"
region = "us-east-2"

# Create S3 client
s3 = boto3.client(
    "s3",
    region_name=region,
    aws_access_key_id=aws_access_key,
    aws_secret_access_key=aws_secret_key
)

bucket_name = "my-boto3-s3-bucket-zm"   # replace with your actual bucket name

try:
    s3.delete_bucket(Bucket=bucket_name)
    print(f"Bucket '{bucket_name}' deleted successfully!")
except Exception as e:
    print(f"Error deleting bucket: {e}")
